Вывод 1-ого "проблемного" кода: 1 2 3 4 5 6 7 8 9 10 10
Вывод 2-ого кода, демонстрирующего "проблемность" 1-ого кода: 
1 2 3 4 1 1 1 1 4 5 5 или 1 2 3 4 5 6 7 8 8 8 8 и т.д. (вывод рандомный)
Проблема кода возникает из-за того, что, когда мы добавляем в код строку time.sleep(random.randint(0, 1)), т.е. функция def thread_job() засыпает на некоторое рандомное время, то разные потоки начинают менять одни и те же данные. Решение этой проблемы заключается в том, что с помощью метода acquire() блокируется примитив lock и выполнение блока до тех пор, пока метод  release() из другой сопрограммы не разблокирует его. Таким образом, примитивы lock  могут использоваться для предотвращения противоречивости в выходных данных, позволяя каждый раз только одному потоку изменять данные. 